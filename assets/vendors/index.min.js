"use strict";

(function () {
  'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var freeGlobal = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal;

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;

  var root = _freeGlobal || freeSelf || Function('return this')();
  var _root = root;

  var _Symbol2 = _root.Symbol;
  var _Symbol = _Symbol2;

  _Symbol ? _Symbol.toStringTag : undefined;

  _Symbol ? _Symbol.toStringTag : undefined;

  (function ($, wind) {


    var swiperClass = document.getElementsByClassName('swiper-container');
    var swipers = [];



    var findClosestDescendant = function findClosestDescendant($item, el, closest) {
      return $item.find(el).filter(function () {
        return $(this).closest(closest).is($item);
      });
    };

    var swiper = function swiper(that, key) {
      var index = "swiper-unique-".concat(key);
      that.classList.add(index);
      that.setAttribute('id', index); 

      var elArrows = $(that).parent(),
          arrowPrev = findClosestDescendant(elArrows, '.swiper-button-prev', '.swiper'),
          arrowNext = findClosestDescendant(elArrows, '.swiper-button-next', '.swiper'); 

      var elPagination = that.parentNode.querySelector(':not(.swiper-slide) .swiper-pagination');

      if (elPagination) {
        elPagination.classList.add('swiper-pagination-' + index);
      } 


      var dataLoop = !!that.getAttribute('data-loop'),
          dataInteraction = !!that.getAttribute('data-interaction'),
          dataSpeed = +that.getAttribute('data-speed'),
          dataEffect = that.getAttribute('data-effect');
      that.getAttribute('data-progress-move');
      var dataCenterSlide = !!that.getAttribute('data-center-slide');
      +that.getAttribute('data-initial-slide');
      var dataAutoplayDelay = +that.getAttribute('data-autoplay-delay'),
          dataSimulateTouch = !!that.getAttribute('data-simulate-touch'),
          dataDirection = that.getAttribute('data-direction'),
          dataSlidePreview = +that.getAttribute('data-slides-preview'),
          dataPaginationType = that.getAttribute('data-pagination-type');
      !!that.getAttribute('data-slide-clicked');
      var dataSpaceBetween = +that.getAttribute('data-slides-space');
      !!that.getAttribute('data-auto-height');
      +that.getAttribute('data-lazy');
      +that.getAttribute('data-mousewheel');
      var dataAutoplay = !!that.getAttribute('data-autoplay');

      if (dataAutoplay) {
        dataAutoplay = {
          delay: dataAutoplayDelay,
          disableOnInteraction: dataInteraction
        };
      }

      var dataSlidePreview_xs = that.getAttribute('data-slides-preview-xs'),
          dataSpaceBetween_xs = that.getAttribute('data-space-xs');

      _defineProperty({}, 0, {
        slidesPerView: dataSlidePreview_xs,
        spaceBetween: dataSpaceBetween_xs
      }); 


      swipers[index] = new Swiper('.' + index, {
        autoplay: dataAutoplay,
        loop: dataLoop,
        simulateTouch: dataSimulateTouch,
        effect: dataEffect,
        speed: dataSpeed,
        direction: dataDirection,
        centeredSlides: dataCenterSlide,
        slidesPerView: dataSlidePreview,
        spaceBetween: dataSpaceBetween,
        loopAdditionalSlides: 4,
        roundLengths: true,
        noSwiping: true,
        noSwipingClass: 'swiper-no-swiping',
        watchSlidesVisibility: true,
        slideVisibleClass: 'swiper-slide-visible',
        pagination: {
          el: ".swiper-pagination-".concat(index),
          type: dataPaginationType,
          clickable: true
        },
        navigation: {
          nextEl: arrowNext,
          prevEl: arrowPrev
        },
        on: {
          init: function init() {
            var wrapper = $('.swiper-slide').not('.swiper-slide-active'); 

            wrapper.find('.animated').each(function (index, elem) {
              var settings = $(elem).data('settings');

              if (!settings) {
                return;
              }

              if (!settings._animation && !settings.animation) {
                return;
              }

              var anim = settings._animation || settings.animation;
              $(elem).removeClass('animated ' + anim).addClass('elementor-invisible');
            }); 
          },
          transitionStart: function transitionStart() {
            if (dataLoop) {
              var $wrapperEl = that.swiper.$wrapperEl;
              var params = that.swiper.params;
              $wrapperEl.children('.' + params.slideClass + '.' + params.slideDuplicateClass).each(function () {
                var idx = this.getAttribute('data-swiper-slide-index');
                this.innerHTML = $wrapperEl.children('.' + params.slideClass + '[data-swiper-slide-index="' + idx + '"]:not(.' + params.slideDuplicateClass + ')').html();
              });
            }

            $('.swiper-wrapper').find('.swiper-slide-active .elementor-invisible').each(function (index, elem) {
              var settings = $(elem).data('settings');

              if (!settings) {
                return;
              }

              if (!settings._animation && !settings.animation) {
                return;
              }

              var delay = settings._animation_delay ? settings._animation_delay : 0,
                  anim = settings._animation || settings.animation;
              setTimeout(function () {
                $(elem).removeClass('elementor-invisible').addClass(anim + ' animated');
              }, delay);
            });
          },
          transitionEnd: function transitionEnd() {
            if (dataLoop) {
              that.swiper.slideToLoop(that.swiper.realIndex, 0, false);
            }

            var wrapper = $('.swiper-slide').not('.swiper-slide-active');
            wrapper.find('.animated').each(function (index, elem) {
              var settings = $(elem).data('settings');

              if (!settings) {
                return;
              }

              if (!settings._animation && !settings.animation) {
                return;
              }

              var anim = settings._animation || settings.animation;
              $(elem).removeClass('animated ' + anim).addClass('elementor-invisible');
            });
          }
        }
      });
      $(that).hover(function () {
      }, function () {
      });
    };

    window.initSwiper = function (target) {
      if (target) {
        Array.prototype.forEach.call(target, swiper);
      }
    };

    $(window).on('load', function () {
      setTimeout(function () {
        $(window).trigger('resize');
      }, 200);

      if (swiperClass.length) {
        initSwiper(swiperClass);
      }
    }); 

    $(window).on('elementor/frontend/init', function () {
      if (window.location.href.indexOf('elementor-preview') > -1) {
        elementorFrontend.hooks.addAction('frontend/element_ready/widget', function ($scope) {
          if (swiperClass.length) {
            initSwiper(swiperClass);
          }
        });
      }
    });
  })(jQuery);
})();
