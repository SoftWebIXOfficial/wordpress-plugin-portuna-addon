"use strict";

(function () {
  'use strict';

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function F() {};

        return {
          s: F,
          n: function n() {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function e(_e) {
            throw _e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function s() {
        it = o[Symbol.iterator]();
      },
      n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function e(_e2) {
        didErr = true;
        err = _e2;
      },
      f: function f() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  } 


  var __ = wp.i18n.__;

  (function ($, window, doc) {
    var editorPanelSettings = {
      onInit: function onInit() {
        editorPanelSettings.bindEvents();
      },
      bindEvents: function bindEvents() {
        window.elementor.hooks.addAction('panel/open_editor/widget', function (panel) {
          editorPanelSettings.elementorControls(panel);
          $(document).on('click', '.elementor-component-tab', function () {
            editorPanelSettings.elementorControls(panel);
          });
        });
      },
      elementorControls: function elementorControls(panel) {
        var el = panel.$el,
            dataWidgets = typeof data != 'undefined' ? JSON.parse(JSON.stringify(data.pro_controls_section)) : {},
            dialog = editorPanelSettings.createDialogMessage(),
            observer = new MutationObserver(function (mutations) {
          var _iterator = _createForOfIteratorHelper(mutations),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var mutation = _step.value;

              if (mutation.type === 'childList') {
                if (mutation.addedNodes.length) {
                  editorPanelSettings.checkControls(el, dataWidgets);
                  editorPanelSettings.dialogMessageControl(el, dialog);
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }),
            config = {
          childList: true
        };
        editorPanelSettings.checkControls(el, dataWidgets);
        editorPanelSettings.dialogMessageControl(el, dialog);
        editorPanelSettings.dialogMessageSettings();
        observer.observe(el.find('#elementor-controls')[0], config);
      },
      checkControls: function checkControls(el, dataWidgets) {
        $.each(dataWidgets, function (index, item) {
          el.find(".elementor-section-toggle[data-collapse_id='".concat(item, "']")).closest('.elementor-control').addClass('portuna-addon-pro-section elementor-open');
        });
      },
      createDialogMessage: function createDialogMessage() {
        var settings = editorPanelSettings.dialogMessageSettings(),
            dialogMessage = elementorCommon.dialogsManager.createWidget(settings.dialogType, settings.dialogOptions);
        dialogMessage.addButton({
          name: 'close',
          text: __('Close', 'portuna-addon')
        });
        dialogMessage.addButton({
          name: 'purchase_now',
          text: __('Purchase Now', 'portuna-addon'),
          callback: function callback() {
            open('https://pay.fondy.eu/s/0J8D2oVKUlLMab', '_blank'); 
          }
        });
        return dialogMessage;
      },
      dialogMessageSettings: function dialogMessageSettings() {
        return {
          dialogType: 'lightbox',
          dialogOptions: {
            className: 'portuna-addon--pro-modal',
            id: 'elementor-deactivate-feedback-modal',
            headerMessage: __('Get the Pro', 'portuna-addon'),
            message: __('In order to use professional features to expand your toolkit and create sites faster and better, you need to purchase an extended version of the plugin.', 'portuna-addon'),
            effects: {
              hide: 'hide',
              show: 'show'
            },
            hide: {
              onBackgroundClick: false
            },
            position: {
              my: 'center',
              at: 'center'
            }
          }
        };
      },
      dialogMessageControl: function dialogMessageControl(el, dialog) {
        el.find('.portuna-addon-pro-section').on('click', function () {
          dialog.show();
        });
      }
    };
    $(window).on('load', function () {
      editorPanelSettings.onInit();
    });
  })(jQuery, window);
})();
